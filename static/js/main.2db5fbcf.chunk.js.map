{"version":3,"sources":["logo.svg","Table.js","data/campaign-data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CampaignTable","props","useState","setDate","campaignSelected","setCampaignSelected","rowSelected","setRowSelected","openModel","setOpenModel","onDateChange","date","toISOString","split","Modal","open","Header","Button","basic","color","style","float","content","onClick","Content","Description","company","country","Table","celled","Row","HeaderCell","Body","campaignData","map","campaign","openPopup","Cell","compaignDate","days","Math","floor","Date","parse","abs","getDateDiff","Icon","name","className","size","e","stopPropagation","onDatePickerSelected","selected","onChange","UPCOMINGCAMPAIGNS","LIVECAMPAIGNS","PASTCAMPAIGNS","panes","menuItem","render","Tab","Pane","attached","App","menu","pointing","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2db5fbcf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useState, useEffect, Fragment} from \"react\";\nimport { Icon, Label, Menu, Table, Modal, Button, Image, Header } from 'semantic-ui-react'\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst CampaignTable = (props) => {\n\n  const [date, setDate] = useState(''); \n  const [campaignSelected, setCampaignSelected] = useState({});\n  const [rowSelected, setRowSelected] = useState({});\n  const [openModel, setOpenModel] = useState(false);\n\n  const getDateDiff = (compaignDate) => {\n    const days =  Math.floor(( Date.parse(Date()) - Date.parse(compaignDate) ) / 86400000);\n    const daysDifference = days > 0 ? `${days} days ago` : `${Math.abs(days)} days left`;\n    return daysDifference;\n  }\n\n  const onDateChange = (date) => {\n   campaignSelected.date = date.toISOString().split('T')[0];\n   setDate(campaignSelected.date);\n  };\n\n  const onDatePickerSelected = (e, campaign) => {\n    e.stopPropagation();\n    setCampaignSelected(campaign);\n  }\n\n  const openPopup = (campaign) => {\n    setRowSelected(campaign);\n    setOpenModel(true);   \n  }\n\n  const closePopup = () => {\n    setOpenModel(false);\n  }\n\n  const createTableRows = () => {\n    return props.campaignData.map(campaign => {\n      return (\n        <Fragment>\n          <Table.Row onClick = {() => openPopup(campaign)}>\n          <Table.Cell>\n          <p>{campaign.date}</p>\n          <p>{getDateDiff(campaign.date)}</p>\n          </Table.Cell>\n          <Table.Cell>\n            <p>{campaign.company}</p>\n            <p>{campaign.country}</p>\n          </Table.Cell>\n          <Table.Cell>\n            <p><Icon name = \"dollar\" /></p>\n            <p> VIEW PRICING </p>\n          </Table.Cell>\n          <Table.Cell>\n            <div className=\"actions-col\">\n              <p className = \"action-col-content\">\n                <Icon size =\"large\" name = \"file alternate outline\" /> CSV\n              </p>\n              <p className = \"action-col-content\">\n                <Icon size =\"large\" name = \"chart bar\" /> REPORT\n              </p>\n              <p className = \"action-col-content\" onClick={(e) => onDatePickerSelected(e, campaign)}>\n              <DatePicker\n                selected={new Date(campaign.date)}\n                onChange={onDateChange}\n              />\n               {/* <Icon size =\"large\" name = \"calendar alternate outline\" /> SCHEDULE AGAIN */}\n              </p>\n            </div>\n          </Table.Cell>\n          \n        </Table.Row>\n      </Fragment>\n    )\n    });\n  }\n\n  const createModal = () => {\n    return (\n      <Modal open = {openModel}>\n          <Modal.Header>CAMPAIGN INFORMATION\n          <Button basic color='red' style ={{ float: \"right\"}} content=\"close\" onClick={() => closePopup()} />\n          </Modal.Header>\n          <Modal.Content>\n            <Modal.Description>\n            \n              <Header>{`Campaign Date: ${rowSelected.date}`}\n              </Header>\n              <p>{`Company: ${rowSelected.company}`}</p>\n              <p>{`Country: ${rowSelected.country}`}</p>\n              <p>{`Price: $10`}</p>\n            </Modal.Description>\n          </Modal.Content>\n        </Modal>\n      );\n  }\n\n  return   (\n    <Fragment>\n      {createModal()}\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>DATE</Table.HeaderCell>\n            <Table.HeaderCell>CAMPAIGN</Table.HeaderCell>\n            <Table.HeaderCell>VIEW</Table.HeaderCell>\n            <Table.HeaderCell>ACTIONS</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {createTableRows()}\n        </Table.Body>\n      </Table> \n    </Fragment>\n  );\n}\n\nexport default CampaignTable;","export const UPCOMINGCAMPAIGNS = [\n  {\n    date: \"2019-05-01\",\n    company: \"Test Whatsapp\",\n    country: \"US\"\n  },\n  {\n    date: \"2020-06-10\",\n    company: \"Super Jewels Quest\",\n    country: \"CA, FR\"\n  },\n  {\n    date: \"2020-08-5\",\n    company: \"Mole Slayer\",\n    country: \"FR\"\n  }\n]\n\nexport const LIVECAMPAIGNS = [\n  {\n    date: \"2019-09-27\",\n    company: \"Test Whatsapp\",\n    country: \"US\"\n  },\n  {\n    date: \"2019-09-28\",\n    company: \"Super Jewels Quest\",\n    country: \"CA, FR\"\n  },\n  {\n    date: \"2020-09-29\",\n    company: \"Mole Slayer\",\n    country: \"FR\"\n  }\n]\n\nexport const PASTCAMPAIGNS = [\n  {\n    date: \"2018-02-10\",\n    company: \"Test Whatsapp\",\n    country: \"US\"\n  },\n  {\n    date: \"2017-03-10\",\n    company: \"Super Jewels Quest\",\n    country: \"CA, FR\"\n  },\n  {\n    date: \"2016-08-5\",\n    company: \"Mole Slayer\",\n    country: \"FR\"\n  }\n]","import React from 'react';\nimport { Tab } from 'semantic-ui-react'\n\nimport CampaignTable from \"./Table\"; \nimport {UPCOMINGCAMPAIGNS, LIVECAMPAIGNS, PASTCAMPAIGNS} from \"./data/campaign-data\";\nimport logo from './logo.svg';\nimport './App.css';\n\nconst panes = [\n  {\n    menuItem: 'UPCOMING CAMPAIGNS',\n    render: () => <Tab.Pane attached={false}><CampaignTable campaignData = {UPCOMINGCAMPAIGNS}/></Tab.Pane>,\n  },\n  {\n    menuItem: 'LIVE CAMPAIGNS',\n    render: () => <Tab.Pane attached={false}><CampaignTable campaignData = {LIVECAMPAIGNS}/></Tab.Pane>,\n  },\n  {\n    menuItem: 'PAST CAMPAIGNS',\n    render: () => <Tab.Pane attached={false}><CampaignTable campaignData = {PASTCAMPAIGNS}/></Tab.Pane>,\n  },\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <div className=\"heading\">Manage <span className=\"sub-head\">Campaigns</span></div>\n      <Tab menu={{ pointing: true }} panes={panes} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}